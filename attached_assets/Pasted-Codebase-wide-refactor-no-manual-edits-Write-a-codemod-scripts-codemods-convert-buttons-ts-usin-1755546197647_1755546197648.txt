Codebase-wide refactor (no manual edits)

Write a codemod (scripts/codemods/convert-buttons.ts) using ts-morph to:

Import Button where a native <button> is used.

Replace <button ...> with <Button ...> and preserve onClick, type, disabled, children, and className (append to className on <Button>).

For anchors styled as buttons (<a role="button">), convert to <Button> with onClick={(e)=>{e.preventDefault(); navigate(href);}} or keep <Link> + asChild pattern if present.

Run the codemod across src/**/*.{tsx,jsx} and remove any unused button utility classes left behind.

Add an ESLint rule to forbid native <button> usage (except inside Button itself).

4) Snapshot style page

Create src/pages/Styleguide.tsx that renders all Button variants/sizes and common states (default/hover/focus/disabled/loading) so we can visually verify the Bolton look quickly.

5) Automatic tests for every button

Unit/Integration (Vitest + React Testing Library)

Add tests/all-buttons.spec.tsx:

For each main route (/dashboard, /contracts, /legal-tasks, /repository), render with MemoryRouter.

getAllByRole('button') → for each button:

assert it’s in the document and visible,

simulate a click (fireEvent.click) and assert no console errors or thrown exceptions,

if the button has onClick, spy and expect it to be called,

if it navigates (has data-nav or is inside a Link), assert location changed.

Mock network with vi.stubGlobal('fetch', jest.fn(()=>Promise.resolve(new Response('{}')))).

E2E (Playwright)

Add a TEST_MODE=true that disables destructive actions on the server/mocks.

Create e2e/buttons.spec.ts:

Navigate to each route; collect page.getByRole('button'); click them sequentially with a small delay; assert no uncaught exceptions (page.on('pageerror')) and no HTTP 4xx/5xx (intercept and stub).

For modals, press Escape to close before continuing.

6) Acceptance criteria

Every button renders via src/components/ui/Button.tsx.

Visual style = Bolton pill: rounded-full, primary-700 background, white text, shadow, focus ring, hover darken.

“New Contract” uses variant=\"accent\" (yellow).

Tests pass: Vitest + Playwright confirm all buttons render and can be clicked without errors.

Add a README section: how to use Button, variants/sizes, and why <button> is disallowed.

Commit all changes and run the test suites. Show me the updated UI and test report.